clear % Spécifique à Matlab
clc	% Spécifique à Matlab
Infir1 = [1,0,0,0];
Infir2 = [2,0,0,0];
Infir3 = [3,0,0,0];
MAT = [];
INF = [];
Nbtache = [3-length(nonzeros(Infir1(2:4)))  % Nombre de prélèvement(s) en cours chez un infirmier
    3-length(nonzeros(Infir2(2:4)))
    3-length(nonzeros(Infir3(2:4)))];
Infirmiers =sbs([Infir1;Infir2;Infir3],Nbtache); % Tableau des prélèvements en cours chez chaque infirmier
TpRestant = sbs([1;2;3],zeros(3));  % Tableau des durées restantes des prélèvements en cours chez chaque infirmier
litsMax = [6;4;3]; % Nombre de lits max dispo, 6:Sang Total, 4:Plasma, 3:Plaquette
duree = [15,90,120];    % Durée de chaque prélèvement 15 min :Sang Total, 1h30:Plasma, 2h:Plaquette
temps = 0;      % Temps initial peut être n'importe quelle heure
delta = 5;     % Durée d'un rdv chez le medecin
Taches = [1;2;3];   % Indice de chaque prélèvement 1:Sang Total, 2:Plasma, 3:Plaquette
Variation = sbs(Taches,zeros(3));
compteurST =  0;
compteurPLQ = 0;
compteurPL = 0;
N=95;   % Nombre total de RDV
butST = 70; % Objectif de prélèvement en Sang Total
butPL = 30; % Objectif de prélèvement en Plasma
butPLQ = 5; % Objectif de prélèvement en Plaquette
Lits = litsMax;
for i=1:N
    Priorite = flipud(mySort(sbs(Taches,Taches.*Lits),'columns',2));    % Calcul de la priorité de chaque prélèvement
    if compteurPLQ>=butPLQ
        Priorite(Priorite(:,1)==3,:) = [];
    end
    if compteurPL>=butPL
        Priorite(Priorite(:,1)==2,:) = [];
    end  
    if compteurST>=butST
        Priorite(Priorite(:,1)==1,:) = [];
    end      
    tache = Priorite(1);    % Choix de la tâche avec la plus haut priorité
    [dispoinf,Infdispo]=DisponibiliteInf(tache,Infirmiers);     % Recherche d'infirmier disponible
    dispolit = DisponibiliteLit(tache,Lits);    % Recherche de lit disponible
    if dispoinf&&dispolit
        Lits(tache) = Lits(tache)-1;
        if Infdispo(1)==1   % Cas où infirmier N°1 disponible
            indlibre = find(Infdispo==0);   % Recherche de l'indice de la tache disponible
            Infir1(indlibre(1)) = tache;    % Assignation de la tache à l'infirmier
            Nbtache(1) = Nbtache(1)-1;      % Actualisation de son nombre total de tâche
            TpRestant(Infdispo(1),indlibre(1))=duree(tache);    % Début de comptage de la durée de la tache
        elseif Infdispo(1)==2   % Cas où infirmier N°2 disponible (Suite Idem que précédemment)
            indlibre = find(Infdispo==0);
            Infir2(indlibre(1)) = tache;
            Nbtache(2) = Nbtache(2)-1;
            TpRestant(Infdispo(1),indlibre(1))=duree(tache);
        elseif Infdispo(1)==3   % Cas où infirmier N°3 disponible 
            indlibre = find(Infdispo==0);
            Infir3(indlibre(1)) = tache;
            Nbtache(3) = Nbtache(3)-1;
            TpRestant(Infdispo(1),indlibre(1))=duree(tache);
        end
        SuperAgenda0(i,:) = [temps,tache];   % Insertion du temps dans l'agenda
        Infirmiers =sbs([Infir1;Infir2;Infir3],Nbtache);    % Actualisation du tableau Infirmiers
        % Comptage des prélèvements
        if tache==1
            compteurST =  compteurST+1;
        elseif tache==2
            compteurPL = compteurPL +1;
        else
            compteurPLQ = compteurPLQ + 1;
        end  
            
    else   % Si la tache n'est pas possible
            SuperAgenda0(i,:) = [temps,0];   % Insertion du temps dans l'agenda
    end
    temps = temps + delta;

    %% Actualisation des durées restantes des prélèvements en cours chez chaque infirmier
    for j=1:3
        for k=2:4
            if ~isempty(Infdispo) % Cas où un infirmier a été trouvé pour une tâche
                if TpRestant(j,k)>0 && or(j~=Infdispo(1),k~=indlibre(1))
                    TpRestant(j,k) = TpRestant(j,k)-delta;
                end
            else                                        % Cas où aucun infirmier n'a été trouvé pour une tâche
                if TpRestant(j,k)>0
                    TpRestant(j,k) = TpRestant(j,k)-delta;
                end                
            end
        end
    end
    
    MAT(:,:,i) = TpRestant; % Tableau 3D contenant les durées restantes à chaque itération
    LIT(i,:) = Lits';       % Tableau contenant l'évolution du nombre de lits
    
    %% Actualisation des taches en cours chez chaque infirmier
    if i>1
        Variation(:,2:4) = MAT(:,2:4,i)-MAT(:,2:4,i-1);
        for j=1:3
            for k=2:4
                if TpRestant(j,k)<=0 && Variation(j,k)<0
                    TpRestant(j,k) = 0;
                    tacheFini = Infirmiers(j,k);
                    Infirmiers(j,k) = 0;
                    Nbtache(j) = Nbtache(j)+1;
                    Lits(tacheFini) = Lits(tacheFini)+1;
                end
            end
        end
    end
    Infirmiers =sbs(Infirmiers(:,1:4),Nbtache); % Actualisation du tableau Infirmiers
    Infir1 = Infirmiers(1,1:4);
    Infir2 = Infirmiers(2,1:4);
    Infir3 = Infirmiers(3,1:4);
    INF(:,:,i) = Infirmiers;        % Tableau 3D contenant des prélèvements en cours chez chaque infirmier à chaque itération
end

%% Conversion du temps en (heures:minutes)
heure_initial = [8,15]; % [heure minute]
temps_attente = 15;
for i1=1:N
    t = SuperAgenda0(i1)+temps_attente+heure_initial(2);
    heure_rdv(i1,:) = [heure_initial(1) + floor(t/60), mod(t,60)];
end
SuperAgenda = sbs(heure_rdv,SuperAgenda0(:,2));
xlswrite('SuperAgenda.xlsx',SuperAgenda) % Conversion en fichier Excel


%% FUNCTIONS
%% Recherche d'un infirmier pour un prélèvement
function [dispoinf,Infdispo]=DisponibiliteInf(tache,Infirmiers)
InfLibres = Infirmiers(Infirmiers(:,end)>0,:);   % Recherche des infirmiers libres
InfLibres = flipud(mySort(InfLibres,'columns',5)); % Classement des infirmiers partant de la plus disponible
Infdispo = [];
dispoinf = false;
if ~isempty(InfLibres) % Si au moins une infirmière est libre
    for i=1:size(InfLibres,1) % On verifie les taches de chaque infirmier
        tachesInf = InfLibres(i,2:4); % en commençant par la plus disponible
        if tache==2 % Si la tache est le prélèvement de Plaquette
            dispoinf = isempty(tachesInf(tachesInf==3)); % On verifie qu'il n'a pas de prélèvement de Plasma en cours
            if dispoinf
                Infdispo = InfLibres(i,:);
                break
            end
        elseif tache==3 % Si la tache est le prélèvement de Plasma
            dispoinf = isempty(tachesInf(tachesInf==2));   % On verifie qu'il n'a pas de prélèvement de Plaquette en cours
            if dispoinf
                Infdispo = InfLibres(i,:);
                break
            end
        else  % Sinon il est dispo pour la tache
            dispoinf = true;
            if dispoinf
                Infdispo = InfLibres(i,:);
                break
            end
        end
    end
end

end
%% Recherche d'un lit disponible pour un prélèvement
function dispolit = DisponibiliteLit(tache,Lits)
    if tache==1 && Lits(tache)>0
        dispolit = true;
    elseif  tache==2 && Lits(tache)>0
        dispolit = true;
    elseif  tache==3 && Lits(tache)>0
        dispolit = true;
    else
        dispolit = false;
    end
end
%% Fonction de tri
function sortedMatrix = mySort(Matrix,arg,num)
    % Matrix = SG4Rot0';
    % num = 4;
    % arg = 'rows';
    sortedMatrix = [];
    switch arg
    case 'columns'
        while ~isempty(Matrix)
            Min = min(Matrix(:,num));
            Indexes = find(Matrix(:,num)==Min);
            Mat = Matrix(Indexes,:);
            Matrix(Indexes,:) = [];
            sortedMatrix = abv(sortedMatrix,Mat);
        end
    case 'rows'
        while ~isempty(Matrix)
            Min = min(Matrix(num,:));
            Indexes = find(Matrix(num,:)==Min);
            Mat = Matrix(:,Indexes);
            Matrix(:,Indexes) = [];
            sortedMatrix = sbs(sortedMatrix,Mat);
        end  
    end
end
